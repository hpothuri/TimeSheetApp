package model.am;

import java.math.BigDecimal;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;

import model.am.common.TimeSheetAppController;

import model.vo.TimeSheetDaysVOImpl;
import model.vo.TimeSheetDaysVORowImpl;
import model.vo.TimeSheetWeekVOImpl;
import model.vo.TimeSheetWeekVORowImpl;
import model.vo.TimesheetUsersMappingVOImpl;
import model.vo.TimesheetUsersMappingVORowImpl;
import model.vo.WeeksVVOImpl;
import model.vo.WeeksVVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 14 12:00:47 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TimeSheetAppControllerImpl extends ApplicationModuleImpl implements TimeSheetAppController {
    /**
     * This is the default constructor (do not remove).
     */
    public TimeSheetAppControllerImpl() {
    }

    /**
     * Container's getter for TimeSheetWeekVO3.
     * @return TimeSheetWeekVO3
     */
    public TimeSheetWeekVOImpl getTimeSheetWeekVO1() {
        return (TimeSheetWeekVOImpl) findViewObject("TimeSheetWeekVO1");
    }

    /**
     * Container's getter for TimeSheetDaysVO3.
     * @return TimeSheetDaysVO3
     */
    public TimeSheetDaysVOImpl getTimeSheetDaysVO1() {
        return (TimeSheetDaysVOImpl) findViewObject("TimeSheetDaysVO1");
    }

    /**
     * Container's getter for TimeSheetWeekHoursVL.
     * @return TimeSheetWeekHoursVL
     */
    public ViewLinkImpl getTimeSheetWeekHoursVL() {
        return (ViewLinkImpl) findViewLink("TimeSheetWeekHoursVL");
    }

    /**
     * Container's getter for WeeksVVO1.
     * @return WeeksVVO1
     */
    public WeeksVVOImpl getWeeksVVO1() {
        return (WeeksVVOImpl) findViewObject("WeeksVVO1");
    }

    /**
     * Container's getter for TimeSheetTasksVO1.
     * @return TimeSheetTasksVO1
     */
    public ViewObjectImpl getTimeSheetTasksVO1() {
        return (ViewObjectImpl) findViewObject("TimeSheetTasksVO1");
    }

    /**for getting week list of the given date
     * @param systemDate
     * @return
     */
    public ArrayList getWeekList(Date systemDate) {
        SimpleDateFormat sdfr = new SimpleDateFormat("dd/mm/yy");
        String date = sdfr.format(systemDate);
        WeeksVVOImpl weekVO = getWeeksVVO1();
        weekVO.setsystemdate(date);
        weekVO.executeQuery();
        ArrayList weekList;
        weekList = new ArrayList();
        RowSetIterator rsi = weekVO.getRowSetIterator();
        WeeksVVORowImpl currentRow = null;
        while (rsi.hasNext()) {
            currentRow = (WeeksVVORowImpl) rsi.next();
            weekList.add(currentRow.getWeek());
        }
        return weekList;
    }

    /**for initializing timesheet
     * @param currentDate
     */
    public BigDecimal initTimeSheet(Date currentDate) {

        SimpleDateFormat sdfr = new SimpleDateFormat("dd/MMM/yyyy");
        String date = sdfr.format(currentDate);
        WeeksVVOImpl weekVO = getWeeksVVO1();
        weekVO.setsystemdate(date);
        weekVO.executeQuery();
        RowSetIterator itr = weekVO.getRowSetIterator();
        TimeSheetWeekVOImpl tsWeekVO = getTimeSheetWeekVO1();
        Row tsWeekRow = null;
        Date stDate = null;
        Date enDate = null;
        BigDecimal timeSheetId = null;
        while (itr.hasNext()) {
            WeeksVVORowImpl row = (WeeksVVORowImpl) itr.next();
            long ts = currentDate.getTime();
            stDate = row.getWkStarts();
            enDate = row.getWkEnds();
            if (stDate.getTime() < ts && enDate.getTime() > ts) {
                tsWeekRow = tsWeekVO.createRow();
                tsWeekRow.setAttribute("WeekStartDate", row.getWkStarts());
                tsWeekRow.setAttribute("WeekEndDate", row.getWkEnds());
                tsWeekRow.setAttribute("Status", "Pending");
                tsWeekVO.insertRow(tsWeekRow);
                timeSheetId = (BigDecimal) tsWeekRow.getAttribute("TimeSheetId");
            }
        }
        itr.closeRowSetIterator();
        addTimeSheetHours(timeSheetId);
        return timeSheetId;
    }

    /** for editing timesheet hours for the given timesheetid
     * @param timeSheetId
     */

    public void editTimeSheetHours(BigDecimal timeSheetId) {

        TimeSheetWeekVOImpl weekVO = getTimeSheetWeekVO1();
        TimeSheetWeekVORowImpl weekRow = (TimeSheetWeekVORowImpl) weekVO.getCurrentRow();
        int totalHours = 0;

        TimeSheetDaysVOImpl daysVO = getTimeSheetDaysVO1();
        TimeSheetDaysVORowImpl daysRow = (TimeSheetDaysVORowImpl) daysVO.getCurrentRow();
        totalHours +=
            daysRow.getDay1() + daysRow.getDay2() + daysRow.getDay3() + daysRow.getDay4() + daysRow.getDay4() +
            daysRow.getDay5() + daysRow.getDay6() + daysRow.getDay7();
        weekRow.setTotalHours(totalHours);
    }

    /** for creating timesheet hours with default values for the given timesheet id
     *
     * @param timeSheetId
     */
    public void addTimeSheetHours(BigDecimal timeSheetId) {
        TimeSheetDaysVOImpl daysVO = getTimeSheetDaysVO1();
        TimeSheetDaysVORowImpl daysRow = (TimeSheetDaysVORowImpl) daysVO.createRow();

        daysRow.setDay1(0);
        daysRow.setDay2(0);
        daysRow.setDay3(0);
        daysRow.setDay4(0);
        daysRow.setDay5(0);
        daysRow.setDay6(0);
        daysRow.setDay7(0);
        daysVO.insertRow(daysRow);

    }

    public void submitForApproval(BigDecimal timeSheetId) {
        TimeSheetWeekVOImpl weekVO = getTimeSheetWeekVO1();
        TimeSheetWeekVORowImpl weekRow = (TimeSheetWeekVORowImpl) weekVO.getCurrentRow();
        int totalHours = 0;
        totalHours = getTimeSheetHours(timeSheetId); //weekRow.getTotalHours();
        weekRow.setTotalHours(totalHours);// + getTimeSheetHours(timeSheetId));
        weekRow.setStatus("Submitted");
        submitTimeSheet(timeSheetId);
    }

    private int getTimeSheetHours(BigDecimal timeSheetId) {
        int totalHours = 0;
        TimeSheetDaysVOImpl daysVO = getTimeSheetDaysVO1();
        RowSetIterator rsi = daysVO.createRowSetIterator(null);
        TimeSheetDaysVORowImpl daysRow;
        while (rsi.hasNext()) {
            daysRow = (TimeSheetDaysVORowImpl) rsi.next();
            totalHours +=
                daysRow.getDay1() + daysRow.getDay2() + daysRow.getDay3() + daysRow.getDay4() + daysRow.getDay4() +
                daysRow.getDay5() + daysRow.getDay6() + daysRow.getDay7();
        }
        rsi.closeRowSetIterator();
        return totalHours;
    }

    public Boolean deleteTimeSheetHours(BigDecimal timeSheetId) {
        TimeSheetDaysVOImpl daysVO = getTimeSheetDaysVO1();
        TimeSheetWeekVOImpl weekVO = getTimeSheetWeekVO1();
        TimeSheetWeekVORowImpl weekRow = (TimeSheetWeekVORowImpl) weekVO.getCurrentRow();
        TimeSheetDaysVORowImpl daysRow = (TimeSheetDaysVORowImpl) daysVO.getCurrentRow();
        daysRow.remove();
        long count = daysVO.getEstimatedRowCount();
        if (count == 0) {
            weekRow.setTotalHours(0);
            weekRow.setStatus("Open");
            return Boolean.FALSE;
        } else {
            int totalHours = getTimeSheetHours(timeSheetId);
            weekRow.setTotalHours(totalHours);
            weekRow.setStatus("Pending");
            return Boolean.TRUE;
        }
    }


    /**
     * Container's getter for TimesheetUsersMappingVO1.
     * @return TimesheetUsersMappingVO1
     */
    public TimesheetUsersMappingVOImpl getTimesheetUsersMappingVO1() {
        return (TimesheetUsersMappingVOImpl) findViewObject("TimesheetUsersMappingVO1");
    }

    private void submitTimeSheet(BigDecimal timeSheetId) {
        TimesheetUsersMappingVOImpl mappingVO = getTimesheetUsersMappingVO1();
        TimesheetUsersMappingVORowImpl mappingRow = (TimesheetUsersMappingVORowImpl) mappingVO.createRow();
        mappingRow.setTimeSheetId(timeSheetId);
        //mappingRow.setSubmittedBy(value);
        //mappingRow.setSubmittedTo(value);
        mappingVO.insertRow(mappingRow);

    }
}

